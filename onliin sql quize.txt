Social Media Addiction can be a crippling disease affecting millions every year.

We need to identify people who may fall into that category.

Write a query to find the people who spent a higher than average amount of time on social media.

Provide just their first names alphabetically so we can reach out to them individually.

SELECT u.first_name
FROM user_time ut
JOIN users u 
ON ut.user_id = u.user_id
  WHERE ut.media_time_minutes > (SELECT 
                                  AVG(media_time_minutes)
                                  FROM user_time)
ORDER BY u.first_name                 
;
-----------------------------------------------------------------------------------------------------------

Dr. Obrien has seen an uptick in heart attacks for his patients over the past few months. He has been noticing some trends across his patients and wants to get ahead of things by reaching out to current patients who are at a high risk of a heart attack.

We need to identify which clients he needs to reach out to and provide that information to Dr. Obrien.

If a patient is over the age of 50, cholesterol level of 240 or over, and weight 200 or greater, then they are at high risk of having a heart attack.

Write a query to retrieve these patients. Include all columns in your output.

As Cholesterol level is the largest indicator, order the output by Cholesterol from Highest to Lowest so he can reach out to them first.

SELECT * 
FROM patients
WHERE age>50 AND cholesterol >= 240 and weight >= 200
ORDER BY cholesterol DESC;
-----------------------------------------------------------------------------------------------------------

Herschel's Manufacturing Plant has hit some hard times with the economy and unfortunately they need to let some people go.

They figure the younger employees need their jobs more as they are growing families so they decide to let go of their 3 oldest employees. They have more experience and will be able to land on their feet easier (and they had to pay them more).

Write a query to identify the ids of the three oldest employees.

Order output from oldest to youngest.

SELECT employee_id 
FROM employees 
ORDER BY birth_date ASC
LIMIT 3;
-----------------------------------------------------------------------------------------------------------

I love chocolate and only want delicious baked goods that have chocolate in them!

Write a Query to return bakery items that contain the word "Chocolate".

SELECT * 
FROM bakery_items
WHERE product_name like '%Chocolate%';
-----------------------------------------------------------------------------------------------------------

A Computer store is offering a 25% discount for all new customers over the age of 65 or customers that spend more than $200 on their first purchase.

The owner wants to know how many customers received that discount since they started the promotion.

Write a query to see how many customers received that discount.

SELECT COUNT(customer_id) as Customers_Recieved_Discount
FROM customers
WHERE age > 65 OR total_purchase > 200 ;
-----------------------------------------------------------------------------------------------------------

After about 10,000 miles, Electric bike batteries begin to degrade and need to be replaced.

Write a query to determine the amount of bikes that currently need to be replaced.

SELECT COUNT(*) as Amount_Of_Bikes
FROM bikes 
WHERE miles>10000;
-----------------------------------------------------------------------------------------------------------

Often when you're working with customer information you'll want to sell that data to a third party. Sometimes it is illegal to give away sensitive information such as a full name.

Here you are given a table that contains a customer ID and their full name.

Return the customer ID with only the first name of each customer.

SELECT customer_id, substring(full_name,1,instr(full_name,' '))
FROM customers ;
-----------------------------------------------------------------------------------------------------------

Costco is known for their rotisserie chickens they sell, not just because they are delicious, but because they are a loss leader in this area.

This means they actually lose money in selling the chickens, but they are okay with this because they make up for that in other areas.

Using the sales table, calculate how much money they have lost on their rotisserie chickens this year. Round to the nearest whole number.

SELECT round(sum(lost_revenue_millions)) as Lost_on_Rotisserie
FROM sales ;
-----------------------------------------------------------------------------------------------------------

Write a query that returns all of the stores whose average yearly revenue is greater than one million dollars.

Output the store ID and average revenue. Round the average to 2 decimal places.

Order by store ID.

SELECT store_id, round(AVG(revenue),2) as Average_Revenue
FROM stores
GROUP BY store_id
  HAVING AVG(revenue) > 1000000
ORDER BY store_id;
-----------------------------------------------------------------------------------------------------------

Data was input incorrectly into the database. The ID was combined with the First Name.

Write a query to separate the ID and First Name into two separate columns.

Each ID is 5 characters long.

SELECT substring(id,1,5) as ID,
  substring(id,6,length(id)) as Firs_Name
FROM bad_data ;
-----------------------------------------------------------------------------------------------------------

Tesla just provided their quarterly sales for their major vehicles.

Determine which Tesla Model has made the most profit.

Include all columns with the "profit" column at the end.

SELECT *, (car_price - production_cost) * cars_sold as profit
FROM tesla_models 
ORDER BY tesla_model DESC
LIMIT 1;
-----------------------------------------------------------------------------------------------------------

If our company hits its yearly targets, every employee receives a salary increase depending on what level you are in the company.

Give each Employee who is a level 1 a 10% increase, level 2 a 15% increase, and level 3 a 200% increase.

Include this new column in your output as "new_salary" along with your other columns.

SELECT *, 
  CASE 
     WHEN pay_level=1 THEN salary * 1.1
     WHEN pay_level=2 THEN salary * 1.15
     WHEN pay_level=3 THEN salary + (salary * 2.0)
  END as new_salary
FROM employees;
-----------------------------------------------------------------------------------------------------------

Write a query to determine how many direct reports each Manager has.

Note: Managers will have "Manager" in their title.

Report the Manager ID, Manager Title, and the number of direct reports in your output.

do not work : SELECT manager_id, CONTAINS(position,'manager') as Manager_title, COUNT(employee_id) as TotalReports 
FROM direct_reports;

SELECT m.employee_id AS manager_id, m.position AS manager_position, COUNT(*) AS direct_reports
FROM direct_reports e
JOIN direct_reports m ON e.managers_id = m.employee_id
WHERE m.position LIKE '%Manager%'
GROUP BY m.employee_id, m.position;
-----------------------------------------------------------------------------------------------------------
If a customer is 55 or above they qualify for the senior citizen discount. Check which customers qualify.

Assume the current date 1/1/2023.

Return all of the Customer IDs who qualify for the senior citizen discount in ascending order.


SELECT *, TIMESTAMPDIFF(YEAR,birth_date,'2023-1-1') as Years
FROM customers 
WHERE TIMESTAMPDIFF(YEAR, birth_date, '2023-1-1') >= 55
ORDER BY customer_id;
-----------------------------------------------------------------------------------------------------------

Write a query to find all dates with higher temperatures compared to the previous dates (yesterday).
Order dates in ascending order.
SELECT t1.date
FROM temperatures t1 
join temperatures t2 
ON DATEDIFF(t1.date,t2.date) = 1 AND t1.temperature > t2.temperature;


SELECT t1.*, t2.date as date2, t2.temperature as temp2 
FROM temperatures t1 
join temperatures t2 
ON DATEDIFF(t1.date,t2.date) = 1 AND t1.temperature > t2.temperature;
-----------------------------------------------------------------------------------------------------------

Kroger's is a very popular grocery chain in the US. They offer a membership card in exchange for a discount on select items. Customers can still shop at Krogers without the card.

Write a query to find the percentage of customers who shop at Kroger's who also have a Kroger's membership card. Round to 2 decimal places.

WITH ct1 AS (
    SELECT COUNT(*) AS total
    FROM customers
), cte2 AS (
    SELECT COUNT(*) AS total_yes
    FROM customers
    WHERE has_member_card = 'Y'
)
SELECT 
    ROUND((cte2.total_yes / NULLIF(ct1.total, 0)) * 100,2) AS percent
FROM 
    ct1, cte2;
	
SELECT
    ROUND(COUNT(CASE WHEN has_member_card = 'Y' THEN 1 END) / COUNT(*) * 100,2) AS Percentage_with_Membership
FROM customers
WHERE kroger_id IS NOT NULL;
-----------------------------------------------------------------------------------------------------------
Marcie's Bakery is having a contest at her store. Whichever dessert sells more each day will be on discount tomorrow. She needs to identify which dessert is selling more.

Write a query to report the difference between the number of Cakes and Pies sold each day.

Output should include the date sold, the difference between cakes and pies, and which one sold more (cake or pie). The difference should be a positive number.

Return the result table ordered by Date_Sold.

Columns in output should be date_sold, difference, and sold_more.

SELECT date_sold, 
  abs(SUM(CASE WHEN product='Cake' THEN  amount_sold else 0 END) - 
  SUM(CASE WHEN product='Pie' THEN  amount_sold else 0 END))
  as difference,
  CASE WHEN
      (SUM(CASE WHEN product='Cake' THEN  amount_sold else 0 END) > 
      SUM(CASE WHEN product='Pie' THEN  amount_sold else 0 END))
      THEN 'Cake'
      ELSE 'Pie'
  END as Product
FROM desserts 
  GROUP BY date_sold
  ORDER BY date_sold;
  
-----------------------------------------------------------------------------------------------------------

In the United States, fast food is the cornerstone of it's very society. Without it, it would cease to exist.

But which region spends the most money on fast food?

Write a query to determine which region spends the most amount of money on fast food.

WITH food_regions_grouped AS (
SELECT region, SUM(fast_food_millions) AS total_spending
FROM food_regions
GROUP BY region
ORDER BY total_spending DESC 
LIMIT 1
  )
SELECT region
  FROM food_regions_grouped;
-------------------------------------------------------------------------------------------------------------
 
Cars need to be inspected every year in order to pass inspection and be street legal. If a car has any critical issues it will fail inspection or if it has more than 3 minor issues it will also fail.

Write a query to identify all of the cars that passed inspection.

Output should include the owner name and vehicle name. Order by the owner name alphabetically.

SELECT owner_name,vehicle 
FROM inspections
WHERE critical_issues <= 0 AND minor_issues <=3
order by owner_name;
-------------------------------------------------------------------------------------------------------------

Yan is a sandwich enthusiast and is determined to try every combination of sandwich possible. He wants to start with every combination of bread and meats and then move on from there, but he wants to do it in a systematic way.

Below we have 2 tables, bread and meats

Output every possible combination of bread and meats to help Yan in his endeavors.

Order by the bread and then meat alphabetically. This is what Yan prefers.

SELECT bt.bread_name,mt.meat_name 
FROM bread_table bt
  CROSS JOIN meat_table mt
  ORDER BY bt.bread_name, mt.meat_name;
-------------------------------------------------------------------------------------------------------------

At Kelly's Ice Cream Shop, Kelly gives a 33% discount on each customer's 3rd purchase.

Write a query to select the 3rd transaction for each customer that received that discount. Output the customer id, transaction id, amount, and the amount after the discount as "discounted_amount".

Order output on customer ID in ascending order.

Note: Transaction IDs occur sequentially. The lowest transaction ID is the earliest ID.

with cte AS
(
SELECT *, 
row_number() over(partition by customer_id order by transaction_id) 
  as rn 
FROM purchases
)
SELECT customer_id,transaction_id,amount, 
  amount * 0.67 as discounted_amount
from cte
where rn=3;
-------------------------------------------------------------------------------------------------------------

Tech companies have been laying off employees after a large surge of hires in the past few years.

Write a query to determine the percentage of employees that were laid off from each company.

Output should include the company and the percentage (to 2 decimal places) of laid off employees.

Order by company name alphabetically.

SELECT company,
  ROUND((employees_fired/company_size)*100,2) as percenet_laid_off 
FROM tech_layoffs
  GROUP BY company;
-------------------------------------------------------------------------------------------------------------

Return all the candidate IDs that have problem solving skills, SQL experience, knows Python or R, and has domain knowledge.

Order output on IDs from smallest to largest.

SELECT candidate_id 
FROM candidates
where problem_solving is not null and sql_experience is not null
and domain_knowledge is not null 
and (python is not null or r_programming is not null) 
order by candidate_id;
-------------------------------------------------------------------------------------------------------------

Write a query to determine the popularity of a post on LinkedIn

Popularity is defined by number of actions (likes, comments, shares, etc.) divided by the number impressions the post received * 100.

If the post receives a score higher than 1 it was very popular.

Return all the post IDs and their popularity where the score is 1 or greater.

Order popularity from highest to lowest.

with cte as (
SELECT post_id, (actions/impressions)*100 as popularity
FROM linkedin_posts)
select * from cte 
where popularity > 1
order by popularity desc;
-------------------------------------------------------------------------------------------------------------

Write a query to identify products that have undergone shrink-flation over the last year. Shrink-flation is defined as a reduction in product size while maintaining or increasing the price.

Include a flag for Shrinkflation. This should be a boolean value (True or False) indicating whether the product has undergone shrink-flation

The output should have the columns Product_Name, Size_Change_Percentage, Price_Change_Percentage, and Shrinkflation_Flag.

Round percentages to the nearest whole number and order the output on the product names alphabetically.

SELECT Product_Name,
       ROUND(((New_Size - Original_Size) / Original_Size) * 100, 0) AS Size_Change_Percentage,
       ROUND(((New_Price - Original_Price) / Original_Price) * 100, 0) AS Price_Change_Percentage,
       CASE
         WHEN New_Size < Original_Size AND New_Price >= Original_Price THEN 'True'
         ELSE 'False'
       END AS Shrinkflation_Flag
FROM products
ORDER BY product_name ASC;